# -*- coding: utf-8 -*-
"""Varshasepala_Webscraper_Calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lxijPPzZjO_3UXibneB_PwcvoGdIVczm

# **Web Scraper**

## **Web Scraper ‚Äì Documentation**

This project is a simple web scraper built using Python's `requests`, `BeautifulSoup` (from bs4), and `sqlite3` libraries.

### üß© Features:
- Fetches HTML content from a given website.
- Parses and extracts specific HTML elements (tags and class names).
- Stores the extracted data into an SQLite database.
- Handles network errors and empty data safely.

### üß™ Technologies Used:
- `requests`: For sending HTTP GET requests and retrieving page content.
- `BeautifulSoup`: For parsing HTML and extracting elements.
- `sqlite3`: For storing and managing the scraped data locally in a database.

### üõ† Functions:
- `get_page_data(site_link)`: Fetches HTML content from the provided URL.
- `get_elements(html, tag, class_name=None)`: Extracts HTML elements from the page.
- `init_db()`: Initializes a local SQLite database.
- `store_data_to_db(data)`: Stores the extracted data into the database.

### ‚ö†Ô∏è Error Handling:
- Network failures are handled using try-except.
- Handles cases where no tags are found.

### üìå Use Case:
You can use this scraper to collect data like article titles, job postings, or any structured info from websites with consistent HTML structure.
"""

import requests as rq
from bs4 import BeautifulSoup as bs
import sqlite3 as sql

# Function to get page content
def get_page_data(site_link):
    try:
        response = rq.get(site_link)
        response.raise_for_status()
        return response.text
    except requests.RequestException as error:
        print("Error fetching the website:", error)
        return None

# grab all tags of intrest
def get_elements(html, tag, class_name=None):
    soup = BeautifulSoup(html, 'html.parser')
    if class_name:
        found_tags = soup.find_all(tag, class_=class_name)
    else:
        found_tags = soup.find_all(tag)
    return found_tags if found_tags else []

# Function to initialize database and store data
def save_to_database(data):
    conn= sqlite3.connect('scraped_data.db')
    db_cursor = conn.cursor()

    # Create table if not already there
    db_cursor.execute('''
        CREATE TABLE IF NOT EXISTS scraped_info (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text_content TEXT,
            link TEXT
        )
    ''')

    # Insert data into table
    for item in data:
        text, link=item
        db_cursor.execute("INSERT INTO scraped_info (text_content, link) VALUES (?, ?)", (text, link))

    conn.commit()
    conn.close()
    print(f"Saved", len(data), "rows into the db file.")

# --- Main Script Flow ---

# Getting user input
site_url = input(" Enter the URL to scrape: ").strip()
html_tag = input(" Enter the HTML tag to extract (like h2, p, div): ").strip()
css_class = input(" Enter the class name (leave blank if not needed): ").strip() or None

# Fetch and parse HTML
page_html = fetch_webpage(site_url)
if not page_html:
    print(" Couldn‚Äôt get the page content. Exiting.")
    exit()

found_items = get_elements(page_html, html_tag, css_class)

results = []
for item in found_items:
    text = item.get_text(strip=True)
    link = item.find('a')['href'] if item.find('a') else 'N/A'
    results.append((text, link))

# Save scraped data
save_to_database(results)

print(" All done! Check your database for results.")

import sqlite3

# Ask the user politely if they'd like to save the results
choice = input("Would you like to save the results into a CSV file? (yes/no): ").strip().lower()

if choice == 'yes':
    print("Preparing to save the results into a CSV file...")

    # Import the required library
    import pandas as pd

    # Connect to the existing SQLite database
    conn = sqlite3.connect('scraped_data.db')

    # Fetch all the data from the table
    df = pd.read_sql_query("SELECT * FROM scraped_info", conn)

    # Save the data to a CSV file without the index
    df.to_csv('scraped_output.csv', index=False)

    # Close the database connection
    conn.close()

    print("Done! The results have been saved in 'scraped_output.csv'.")
else:
    print("No problem. The results will not be exported.")

"""# **Calculator**

## **Calculator ‚Äì Documentation**

This is a basic calculator program developed using Python. It supports both **console-based interaction** and a **Tkinter-based GUI interface**.

### üß© Features:
- Basic arithmetic operations: Addition, Subtraction, Multiplication, Division.
- Handles **invalid inputs** such as text or empty input.
- Prevents **division by zero** with user-friendly messages.
- Repeats calculations until the user chooses to stop.
- GUI version created using `tkinter` for visual interaction.

### üõ† Functions:
- `add(x, y)`: Returns the sum.
- `subtract(x, y)`: Returns the difference.
- `multiply(x, y)`: Returns the product.
- `divide(x, y)`: Returns the quotient or handles division by zero.

### üß™ Technologies Used:
- `input()` and `print()`: For command-line interaction.
- `try/except`: To handle ValueError and ZeroDivisionError.

### üìå Use Case:
Ideal for beginners to understand functions, user input, exception handling
"""

# This function adds two numbers
def add(x, y):
    return x + y

# This function subtracts two numbers
def subtract(x, y):
    return x - y

# This function multiplies two numbers
def multiply(x, y):
    return x * y

# This function divides two numbers
def divide(x, y):
    if y == 0:
        return "Error: Cannot divide by zero."
    else:
        return x / y


print("Select operation.")
print("1.Add")
print("2.Subtract")
print("3.Multiply")
print("4.Divide")

while True:
    # take input from the user
    choice = input("Enter choice(1/2/3/4): ")



    # check if choice is one of the four options
    if choice in ('1', '2', '3', '4'):
        try:
            num1 = float(input("Enter first number: "))
            num2 = float(input("Enter second number: "))
        except ValueError:
            print("Invalid input. Please enter a number.")
            continue

        if choice == '1':
            print(num1, "+", num2, "=", add(num1, num2))

        elif choice == '2':
            print(num1, "-", num2, "=", subtract(num1, num2))

        elif choice == '3':
            print(num1, "*", num2, "=", multiply(num1, num2))

        elif choice == '4':
            result = divide(num1, num2)
            print(num1, "/", num2, "=", result)

        # check if user wants another calculation
        next_calculation = input("Let's do next calculation? (yes/no): ")
        if next_calculation.lower() == "no":
            break
    else:
        print("Invalid Input")